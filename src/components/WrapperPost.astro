---
import { CollectionEntry } from 'astro:content'

import { formatDate } from '../logics'

export type Props = {
  page: CollectionEntry<'pages'>
}

const { data: frontmatter } = Astro.props.page

// eslint-disable-next-line antfu/no-top-level-await
const { Content } = await Astro.props.page.render()

const base = 'https://antfu.me'
const tweetUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(`Reading @antfu7\'s ${base}${Astro.url.pathname}\n\nI think...`)}`
const elkUrl = `https://elk.zone/intent/post?text=${encodeURIComponent(`Reading @antfu@m.webtoo.ls\'s ${base}${Astro.url.pathname}\n\nI think...`)}`;
---



{(frontmatter.display ?? frontmatter.title) && (
  <div class:list={['prose m-auto mb-8', frontmatter.wrapperClass]}>
    <h1 class="mb-0 slide-enter-50">
      {frontmatter.display ?? frontmatter.title}
    </h1>
    {frontmatter.date && (
      <p class="opacity-50 slide-enter-50 !-mt-6">
        {formatDate(frontmatter.date, false)} {frontmatter.duration && ` Â· ${frontmatter.duration}`}
      </p>
    )}
    {frontmatter.place && (
      <p class="mt--4!">
        <span class="op50">at </span>
        {frontmatter.placeLink
? (
          <a href={frontmatter.placeLink} target="_blank">
            {frontmatter.place}
          </a>
        )
: (
          <span class="font-bold">
            {frontmatter.place}
          </span>
        )}
      </p>
    )}
    {frontmatter.subtitle && (
      <p class="slide-enter italic opacity-50 !-mt-6">
        {frontmatter.subtitle}
      </p>
    )}
    {frontmatter.draft && (
      <p class="slide-enter" style={{ backgroundColor: 'rgba(255, 165, 0, 0.1)', color: 'orange', borderLeft: '3px solid orange', padding: '4px 8px' }}>
        This is a draft post, the content may be incomplete. Please check back later.
      </p>
    )}
  </div>
)}
<article class:list={[frontmatter.tocAlwaysOn ? 'toc-always-on' : '', frontmatter.layoutFullWidth ? '' : 'prose m-auto slide-enter-content']}>
  <Content />
</article>
{Astro.url.pathname !== '/' && (
  <div class="prose slide-enter m-auto mb-8 mt-8 animate-delay-500 print:hidden">
    {frontmatter.duration && (
      <>
        <span class="font-mono op50">&gt; </span>
        <span class="op50">comment on </span>
        <a href={elkUrl} target="_blank" class="op50">mastodon</a>
        <span class="op25"> / </span>
        <a href={tweetUrl} target="_blank" class="op50">twitter</a>
      </>
    )}
    <br />
    <span class="font-mono op50">&gt; </span>
    <a href={Astro.url.pathname.split('/').slice(0, -1).join('/') || '/'} class="font-mono op50 hover:op75">
      cd ..
    </a>
  </div>
)}

<script>
  function navigate(): true | undefined {
    if (location.hash) {
      const el = document.querySelector(decodeURIComponent(location.hash))
      if (el) {
        const rect = el.getBoundingClientRect()
        const y = window.scrollY + rect.top - 40
        window.scrollTo({
          top: y,
          behavior: 'smooth',
        })
        return true
      }
    }
  }

  function handleAnchors(event: any): void {
    const link = event.target.closest('a')

    if (
      !event.defaultPrevented
      && link
      && event.button === 0
      && link.target !== '_blank'
      && link.rel !== 'external'
      && !link.download
      && !event.metaKey
      && !event.ctrlKey
      && !event.shiftKey
      && !event.altKey
    ) {
      const url = new URL(link.href)
      if (url.origin !== window.location.origin)
        return

      event.preventDefault()
      const { pathname, hash } = url
      if (hash && (!pathname || pathname === location.pathname)) {
        window.history.replaceState({}, '', hash)
        navigate()
      }
      else {
        window.location.href = `${pathname}${hash}`
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('hashchange', navigate)
    document.addEventListener('click', handleAnchors, { passive: false })

    setTimeout(() => {
      if (!navigate())
        setTimeout(navigate, 1000)
    }, 1)
  })
  </script>
